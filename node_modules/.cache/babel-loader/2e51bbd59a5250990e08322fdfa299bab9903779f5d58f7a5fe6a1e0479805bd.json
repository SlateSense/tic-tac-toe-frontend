{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OM\\\\Desktop\\\\Tic-Tac-Toe\\\\frontend\\\\src\\\\components\\\\PracticeBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LINES = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\nfunction getWinner(board) {\n  for (const line of LINES) {\n    const [a, b, c] = line;\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return {\n        winner: board[a],\n        line\n      };\n    }\n  }\n  return null;\n}\nfunction isDraw(board) {\n  return board.every(v => v !== null) && !getWinner(board);\n}\nfunction emptySquares(board) {\n  const out = [];\n  for (let i = 0; i < 9; i++) if (board[i] == null) out.push(i);\n  return out;\n}\nfunction smartMove(board, bot, you) {\n  const empties = emptySquares(board);\n  // 1) Win now\n  for (const i of empties) {\n    const b = board.slice();\n    b[i] = bot;\n    if (getWinner(b)) return i;\n  }\n  // 2) Block opponent win\n  for (const i of empties) {\n    const b = board.slice();\n    b[i] = you;\n    if (getWinner(b)) return i;\n  }\n  // 3) Take center\n  if (empties.includes(4)) return 4;\n  // 4) Take a corner\n  const corners = [0, 2, 6, 8].filter(i => empties.includes(i));\n  if (corners.length) return corners[Math.floor(Math.random() * corners.length)];\n  // 5) Any side\n  const sides = [1, 3, 5, 7].filter(i => empties.includes(i));\n  if (sides.length) return sides[Math.floor(Math.random() * sides.length)];\n  // Fallback\n  return empties.length ? empties[0] : null;\n}\nfunction easyMove(board) {\n  const empties = emptySquares(board);\n  if (!empties.length) return null;\n  return empties[Math.floor(Math.random() * empties.length)];\n}\nexport default function PracticeBoard() {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const youSymbol = 'X';\n  const botSymbol = 'O';\n  const [lastMove, setLastMove] = useState(null);\n  const [winningLine, setWinningLine] = useState(null);\n  const [status, setStatus] = useState('Your move');\n  const botTimerRef = useRef(null);\n  const [botThinking, setBotThinking] = useState(false);\n\n  // Derived state\n  const ended = useMemo(() => !!getWinner(board) || isDraw(board), [board]);\n  const turnCount = useMemo(() => board.filter(v => v != null).length, [board]);\n  const yourTurn = useMemo(() => turnCount % 2 === 0, [turnCount]); // You always start\n  const currentSymbol = yourTurn ? youSymbol : botSymbol;\n  useEffect(() => {\n    // Update status based on state\n    const w = getWinner(board);\n    if (w) {\n      setWinningLine(w.line);\n      setStatus(w.winner === youSymbol ? 'You win!' : 'Bot wins!');\n      return;\n    }\n    if (isDraw(board)) {\n      setWinningLine(null);\n      setStatus('Draw');\n      return;\n    }\n    setWinningLine(null);\n    setStatus(yourTurn ? 'Your move' : \"Bot's move\");\n  }, [board, youSymbol, yourTurn]);\n\n  // Cleanup any pending timers on unmount\n  useEffect(() => {\n    return () => {\n      if (botTimerRef.current) clearTimeout(botTimerRef.current);\n    };\n  }, []);\n\n  // Reset the board (you always start)\n  const reset = () => {\n    if (botTimerRef.current) clearTimeout(botTimerRef.current);\n    setBoard(Array(9).fill(null));\n    setLastMove(null);\n    setWinningLine(null);\n    setStatus('Your move');\n    setBotThinking(false);\n  };\n  const onCell = i => {\n    if (ended || !yourTurn || board[i] != null) return;\n    if (botTimerRef.current) clearTimeout(botTimerRef.current);\n    // Apply your move\n    setBoard(prev => {\n      const b = prev.slice();\n      b[i] = youSymbol;\n      setLastMove(i);\n      return b;\n    });\n    // Schedule bot move with randomized timing (300ms to 2000ms)\n    setBotThinking(true);\n    const randomDelay = 300 + Math.random() * 1700;\n    botTimerRef.current = setTimeout(() => {\n      setBoard(prev => {\n        if (getWinner(prev) || isDraw(prev)) return prev; // game could have ended\n        const b2 = prev.slice();\n        const idx = smartMove(b2, botSymbol, youSymbol);\n        if (idx == null || b2[idx] != null) return prev;\n        b2[idx] = botSymbol;\n        setLastMove(idx);\n        return b2;\n      });\n      setBotThinking(false);\n    }, randomDelay);\n  };\n\n  // Removed controls (difficulty, starter, symbol) for a simpler UI\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel neo-panel glass practice\",\n    role: \"region\",\n    \"aria-label\": \"Practice: You vs Bot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"practice-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"practice-title\",\n        children: \"Practice: You vs Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"neo-btn small outline\",\n          onClick: reset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      \"aria-live\": \"polite\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board neo-board practice-board\",\n      children: board.map((cell, idx) => {\n        const win = Array.isArray(winningLine) && winningLine.includes(idx);\n        const last = lastMove === idx;\n        const xo = cell === 'X' ? ' x' : cell === 'O' ? ' o' : '';\n        const cls = `cell${xo}${win ? ' win' : ''}${last ? ' last' : ''}`;\n        const disabled = ended || !yourTurn || board[idx] !== null;\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: cls,\n          onClick: () => onCell(idx),\n          disabled: disabled,\n          \"aria-label\": `Practice cell ${idx + 1}`,\n          children: cell || ''\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"practice-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"muted\",\n        children: \"A friendly practice board. No payments. No opponents. Just you vs. bot.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(PracticeBoard, \"GOOhEPbDi2cIuMUP+TCcy4dZBq0=\");\n_c = PracticeBoard;\nvar _c;\n$RefreshReg$(_c, \"PracticeBoard\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","jsxDEV","_jsxDEV","LINES","getWinner","board","line","a","b","c","winner","isDraw","every","v","emptySquares","out","i","push","smartMove","bot","you","empties","slice","includes","corners","filter","length","Math","floor","random","sides","easyMove","PracticeBoard","_s","setBoard","Array","fill","youSymbol","botSymbol","lastMove","setLastMove","winningLine","setWinningLine","status","setStatus","botTimerRef","botThinking","setBotThinking","ended","turnCount","yourTurn","currentSymbol","w","current","clearTimeout","reset","onCell","prev","randomDelay","setTimeout","b2","idx","className","role","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","cell","win","isArray","last","xo","cls","disabled","_c","$RefreshReg$"],"sources":["C:/Users/OM/Desktop/Tic-Tac-Toe/frontend/src/components/PracticeBoard.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\n\nconst LINES = [\n  [0,1,2],[3,4,5],[6,7,8],\n  [0,3,6],[1,4,7],[2,5,8],\n  [0,4,8],[2,4,6]\n];\n\nfunction getWinner(board) {\n  for (const line of LINES) {\n    const [a,b,c] = line;\n    if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n      return { winner: board[a], line };\n    }\n  }\n  return null;\n}\nfunction isDraw(board) {\n  return board.every(v => v !== null) && !getWinner(board);\n}\nfunction emptySquares(board) {\n  const out = [];\n  for (let i = 0; i < 9; i++) if (board[i] == null) out.push(i);\n  return out;\n}\n\nfunction smartMove(board, bot, you) {\n  const empties = emptySquares(board);\n  // 1) Win now\n  for (const i of empties) {\n    const b = board.slice(); b[i] = bot;\n    if (getWinner(b)) return i;\n  }\n  // 2) Block opponent win\n  for (const i of empties) {\n    const b = board.slice(); b[i] = you;\n    if (getWinner(b)) return i;\n  }\n  // 3) Take center\n  if (empties.includes(4)) return 4;\n  // 4) Take a corner\n  const corners = [0,2,6,8].filter(i => empties.includes(i));\n  if (corners.length) return corners[Math.floor(Math.random() * corners.length)];\n  // 5) Any side\n  const sides = [1,3,5,7].filter(i => empties.includes(i));\n  if (sides.length) return sides[Math.floor(Math.random() * sides.length)];\n  // Fallback\n  return empties.length ? empties[0] : null;\n}\nfunction easyMove(board) {\n  const empties = emptySquares(board);\n  if (!empties.length) return null;\n  return empties[Math.floor(Math.random() * empties.length)];\n}\n\nexport default function PracticeBoard() {\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const youSymbol = 'X';\n  const botSymbol = 'O';\n  const [lastMove, setLastMove] = useState(null);\n  const [winningLine, setWinningLine] = useState(null);\n  const [status, setStatus] = useState('Your move');\n  const botTimerRef = useRef(null);\n  const [botThinking, setBotThinking] = useState(false);\n\n  // Derived state\n  const ended = useMemo(() => !!getWinner(board) || isDraw(board), [board]);\n  const turnCount = useMemo(() => board.filter(v => v != null).length, [board]);\n  const yourTurn = useMemo(() => (turnCount % 2 === 0), [turnCount]); // You always start\n  const currentSymbol = yourTurn ? youSymbol : botSymbol;\n\n  useEffect(() => {\n    // Update status based on state\n    const w = getWinner(board);\n    if (w) {\n      setWinningLine(w.line);\n      setStatus(w.winner === youSymbol ? 'You win!' : 'Bot wins!');\n      return;\n    }\n    if (isDraw(board)) {\n      setWinningLine(null);\n      setStatus('Draw');\n      return;\n    }\n    setWinningLine(null);\n    setStatus(yourTurn ? 'Your move' : \"Bot's move\");\n  }, [board, youSymbol, yourTurn]);\n\n  // Cleanup any pending timers on unmount\n  useEffect(() => {\n    return () => { if (botTimerRef.current) clearTimeout(botTimerRef.current); };\n  }, []);\n\n  // Reset the board (you always start)\n  const reset = () => {\n    if (botTimerRef.current) clearTimeout(botTimerRef.current);\n    setBoard(Array(9).fill(null));\n    setLastMove(null);\n    setWinningLine(null);\n    setStatus('Your move');\n    setBotThinking(false);\n  };\n\n  const onCell = (i) => {\n    if (ended || !yourTurn || board[i] != null) return;\n    if (botTimerRef.current) clearTimeout(botTimerRef.current);\n    // Apply your move\n    setBoard(prev => {\n      const b = prev.slice();\n      b[i] = youSymbol; setLastMove(i);\n      return b;\n    });\n    // Schedule bot move with randomized timing (300ms to 2000ms)\n    setBotThinking(true);\n    const randomDelay = 300 + Math.random() * 1700;\n    botTimerRef.current = setTimeout(() => {\n      setBoard(prev => {\n        if (getWinner(prev) || isDraw(prev)) return prev; // game could have ended\n        const b2 = prev.slice();\n        const idx = smartMove(b2, botSymbol, youSymbol);\n        if (idx == null || b2[idx] != null) return prev;\n        b2[idx] = botSymbol; setLastMove(idx);\n        return b2;\n      });\n      setBotThinking(false);\n    }, randomDelay);\n  };\n\n  // Removed controls (difficulty, starter, symbol) for a simpler UI\n\n  return (\n    <div className=\"panel neo-panel glass practice\" role=\"region\" aria-label=\"Practice: You vs Bot\">\n      <div className=\"practice-header\">\n        <h3 className=\"practice-title\">Practice: You vs Bot</h3>\n        <div>\n          <button className=\"neo-btn small outline\" onClick={reset}>Reset</button>\n        </div>\n      </div>\n\n      <div className=\"status\" aria-live=\"polite\">{status}</div>\n\n      <div className=\"board neo-board practice-board\">\n        {board.map((cell, idx) => {\n          const win = Array.isArray(winningLine) && winningLine.includes(idx);\n          const last = lastMove === idx;\n          const xo = cell === 'X' ? ' x' : (cell === 'O' ? ' o' : '');\n          const cls = `cell${xo}${win ? ' win':''}${last ? ' last':''}`;\n          const disabled = ended || !yourTurn || board[idx] !== null;\n          return (\n            <button key={idx} className={cls} onClick={() => onCell(idx)} disabled={disabled} aria-label={`Practice cell ${idx+1}`}>\n              {cell || ''}\n            </button>\n          );\n        })}\n      </div>\n      <div className=\"practice-footer\">\n        <small className=\"muted\">A friendly practice board. No payments. No opponents. Just you vs. bot.</small>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}